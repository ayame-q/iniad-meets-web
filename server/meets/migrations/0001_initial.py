# Generated by Django 3.1.7 on 2021-03-24 17:15

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('student_id', models.CharField(blank=True, default='', max_length=10, null=True, verbose_name='学籍番号')),
                ('name', models.CharField(blank=True, default='', max_length=40, null=True, verbose_name='本名')),
                ('display_name', models.CharField(default='No name', max_length=20, verbose_name='公開名')),
                ('is_display_name_initialized', models.BooleanField(default=False, verbose_name='公開名初期化済み')),
                ('entry_year', models.IntegerField(blank=True, null=True, verbose_name='入学年度')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='作成日')),
                ('is_student', models.BooleanField(default=False, verbose_name='学生か')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChatLog',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('comment', models.TextField(verbose_name='コメント')),
                ('is_anonymous', models.BooleanField(default=False, verbose_name='匿名投稿')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='作成日')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='meets.chatlog', verbose_name='返信先')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Circle',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('name', models.CharField(max_length=50, verbose_name='サークル名')),
                ('leader_name', models.CharField(default='', max_length=50, verbose_name='代表者名')),
                ('entry_user_name', models.CharField(default='', max_length=50, verbose_name='担当者名')),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='順番')),
                ('start_time_sec', models.IntegerField(blank=True, null=True, verbose_name='開始時刻(秒)')),
                ('pamphlet', models.FileField(blank=True, null=True, upload_to='', verbose_name='サークル資料')),
                ('entry_webhook', models.URLField(blank=True, null=True, verbose_name='登録時Webhook')),
                ('do_notify_join', models.BooleanField(default=True, verbose_name='入会者をSlackで通知する')),
                ('website_url', models.URLField(blank=True, null=True, verbose_name='WebサイトURL')),
                ('twitter_sn', models.CharField(blank=True, max_length=15, null=True, verbose_name='Twitter ID')),
                ('instagram_id', models.CharField(blank=True, max_length=30, null=True, verbose_name='Instagram ID')),
                ('comment', models.TextField(blank=True, default='', verbose_name='一言説明')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('type', models.SmallIntegerField(choices=[(1, 'クイズ'), (2, 'アンケート')], verbose_name='種類')),
                ('text', models.TextField(verbose_name='問題/質問')),
                ('start_time_sec', models.IntegerField(blank=True, null=True, verbose_name='開始時刻(秒)')),
                ('thinking_time_sec', models.IntegerField(blank=True, null=True, verbose_name='検討時間(秒)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('status', models.SmallIntegerField(choices=[(0, '開始前'), (1, '開催中'), (2, '終了')], default=0, verbose_name='開催状況')),
                ('opening_time', models.DateTimeField(blank=True, null=True, verbose_name='開場時間')),
                ('started_time', models.DateTimeField(blank=True, null=True, verbose_name='実際のイベント開始日時')),
                ('planning_start_time', models.DateTimeField(blank=True, null=True, verbose_name='イベント開始予定日時')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='作成日')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='メールアドレス')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionSelection',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('is_correct', models.BooleanField(verbose_name='正解か')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selections', to='meets.question', verbose_name='問題/質問')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('selection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='meets.questionselection', verbose_name='選択')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_answers', to=settings.AUTH_USER_MODEL, verbose_name='クイズ・アンケート回答')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='登録日')),
                ('circle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='meets.circle', verbose_name='サークル')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to=settings.AUTH_USER_MODEL, verbose_name='ユーザー')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='circle',
            name='admin_users',
            field=models.ManyToManyField(blank=True, related_name='admin_circles', to='meets.UserRole', verbose_name='管理者'),
        ),
        migrations.AddField(
            model_name='circle',
            name='staff_users',
            field=models.ManyToManyField(blank=True, related_name='staff_circles', to='meets.UserRole', verbose_name='スタッフ'),
        ),
        migrations.CreateModel(
            name='ChatLogReaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction', models.CharField(max_length=2, verbose_name='リアクション')),
                ('chat_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='meets.chatlog', verbose_name='ログ')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to=settings.AUTH_USER_MODEL, verbose_name='ユーザー')),
            ],
        ),
        migrations.AddField(
            model_name='chatlog',
            name='reacted_users',
            field=models.ManyToManyField(through='meets.ChatLogReaction', to=settings.AUTH_USER_MODEL, verbose_name='リアクション済みユーザー'),
        ),
        migrations.AddField(
            model_name='chatlog',
            name='receiver_circle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to='meets.circle', verbose_name='宛先サークル'),
        ),
        migrations.AddField(
            model_name='chatlog',
            name='send_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_logs', to=settings.AUTH_USER_MODEL, verbose_name='送信者'),
        ),
        migrations.AddField(
            model_name='chatlog',
            name='sender_circle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chat_logs', to='meets.circle', verbose_name='送信元サークル'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userinfo', to='meets.userrole', verbose_name='権限'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
